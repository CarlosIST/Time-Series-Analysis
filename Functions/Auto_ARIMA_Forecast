from statsmodels.tsa.arima_model import ARIMA
import pmdarima as pm

## Build Model ##
model = pm.auto_arima(df.value, start_p=1, start_q=1,
                      test='adf',       # use adftest to find optimal 'd'
                      max_p=3, max_q=3, # maximum p and q
                      m=1,              # frequency of series
                      d=None,           # let model determine 'd'
                      seasonal=False,   # No Seasonality
                      start_P=0, 
                      D=0, 
                      trace=True,
                      error_action='ignore',  
                      suppress_warnings=True, 
                      stepwise=True)

print(model.summary())

## End of Build Model ##

## Residuals ##
model.plot_diagnostics(figsize=(7,5))
plt.show()

## End of Residuals ##

## Function ##

def Auto_ARIMA_Forecast(dataframe, model, periods, ticker):
  '''
  DESC. Function that takes a dataframe and the model built in order to
        output the forecast
  INPUT: dataframe (pandas, from yfinance)
  INPUT: model (pmdarima auto_arima() object)
  INPUT: periods (int, desired number of periods to predict)
  INPUT: ticker (str)
  OUTPUT: 
  '''
  ## Run prediction from model
  fc, confint = model.predict(n_periods = periods, return_conf_int=True)

  ## Declare index of forecast
  index_of_fc = np.arange(len(dataframe), len(dataframe) + periods)

  ## make series for plotting purpose
  fc_series = pd.Series(fc, index=index_of_fc)
  lower_series = pd.Series(confint[:, 0], index=index_of_fc)
  upper_series = pd.Series(confint[:, 1], index=index_of_fc)

  # Plot
  plt.plot(dataframe)
  plt.plot(fc_series, color='darkgreen')
  plt.fill_between(lower_series.index, 
                   lower_series, 
                   upper_series, 
                   color='k', alpha=.15)

  plt.title("Final Forecast of " + ticker)
  plt.show()

  return fc_series
  
  ## End of Function ##

