def plot_ARIMA_cross_validation(dataframe, ticker, forecastSteps, p, d, q, alphaValue):
  '''
  DESC.: Function that takes a dataframe and its corresponding parameters for ARIMA model
          and outputs the plot with the forecast.
  INPUT: dataframe (pandas, taken from yfinance)
  INPUT: ticker (str)
  INPUT: forecastSteps (int, steps to be taken into account for forecasting)
  INPUT: p (int, )
  INPUT: d (int, )
  INPUT: q (int, )
  INPUT: alphaValue (float, significance level)
  OUTPUT: Plot with cross validation
  '''
  ## Create training and test sets
  train = dataframe[:len(dataframe)-forecastSteps]
  test = dataframe[len(dataframe)-forecastSteps:]

  ## ARIMA model
  model = ARIMA(train, order=(p, d, q))
  fitted = model.fit()

  ## Get forecast dataframe
  forecast = fitted.get_forecast(steps = forecastSteps, alpha = alphaValue)
  fc_forecast = forecast.summary_frame()

  ## Get needed columns from the forecast dataframe
  fc_series = pd.Series(fc_forecast['mean'], index = test.index)
  lower_series = pd.Series(fc_forecast['mean_ci_lower'], index = test.index)
  upper_series = pd.Series(fc_forecast['mean_ci_upper'], index = test.index)

  ## Plot forecast vs. actuals
  plt.figure(figsize=(12,5), dpi=100)
  plt.plot(train, label='training')
  plt.plot(test, label='actual')
  plt.plot(fc_series, label='forecast')
  plt.fill_between(lower_series.index, lower_series, upper_series, 
                   color='k', alpha=.15)
  plt.title('Forecast vs Actuals ' + ticker)
  plt.legend(loc='upper left', fontsize=8)
  plt.show()

